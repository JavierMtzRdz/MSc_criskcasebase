experiment_plate2 <- experiment_all %>%
filter(Species == "Human", experiment_plate %in% c("Experiment 1.Plate 2", "Experiment 2.Plate 2"))
oneway_test(Binding.Score ~ experiment_plate, data = experiment_plate2)
var.test(Binding.Score ~ experiment_plate, data = experiment_plate2)
oneway_test(Binding.Score ~ experiment_plate, data = mexperiment_plate1)
# Tests for mouse binding score
mexperiment_plate1 <- experiment_all %>%
filter(Species == "Mouse", experiment_plate %in% c("Experiment 1.Plate 1", "Experiment 2.Plate 1"))
oneway_test(Binding.Score ~ experiment_plate, data = mexperiment_plate1)
var.test(Binding.Score ~ experiment_plate, data = mexperiment_plate1)
mexperiment_plate2 <- experiment_all %>%
filter(Species == "Mouse", experiment_plate %in% c("Experiment 1.Plate 2", "Experiment 2.Plate 2"))
oneway_test(Binding.Score ~ experiment_plate, data = mexperiment_plate2)
var.test(Binding.Score ~ experiment_plate, data = mexperiment_plate2)
experiment_plate1 <- experiment_all %>%
filter(Species == "Human")
View(experiment_plate1)
mexperiment_plate1 <- experiment_all %>%
filter(Species == "Mouse")
mean(experiment_plate1$Binding.Score)
mean(mexperiment_plate1$Binding.Score)
median(mexperiment_plate1$Binding.Score)
median(experiment_plate1$Binding.Score)
# Median score over plates, experiments
experiment_all <- experiment_all %>%
group_by(Antibody.Name) %>%
summarise(median = median(Binding.Score))
View(experiment_all)
# Reading in data
experiment_1 <- read.csv("~/Desktop/ab_stage2/experiment_1_input.csv")
experiment_2 <- read.csv("~/Desktop/ab_stage2/experiment_2_input.csv")
# Merging data into dataframe
experiment_all <- rbind(experiment_1, experiment_2)
# Quick data summary
# No negative counts
summary(experiment_all)
# Check for any missing values again
experiment_na <- colSums(is.na(experiment_all))
experiment_na
# Cleaning up
rm(experiment_na)
# Convert data-set to long-form for plotting
experiment_all <- experiment_all %>%
pivot_longer(cols = c(4, 5), names_to = "Species", values_to = "Binding.Score")
# Clean up binding score column
experiment_all$Species <- sub("Binding.Score.", "", experiment_all$Species)
# Convert to log2(counts + 1) for visualization
experiment_all$Binding.Score_vis <- log2(experiment_all$Binding.Score + 1)
# Create an interaction variable
experiment_all$experiment_plate <- with(experiment_all, interaction(Experiment, Plate), drop = TRUE)
# Batch effects heatmap
experiment_batch <- experiment_all %>%
pivot_wider(id_cols = c(1, 2, 3), names_from = Antibody.Name, values_from = Binding.Score_vis)
# Remove annotation columns
batch_mdat <- experiment_batch[, -c(1, 2, 3)]
batch_mdat <- apply(batch_mdat, 2, as.numeric)
# Annotation columns
cor_mdat <- experiment_batch[, c("Experiment", "Plate", "Species")]
# Convert to factor
cor_mdat[, c(1, 2, 3)] <- lapply(cor_mdat[, c(1, 2, 3)], as.factor)
# Heatmap with ComplexHeatmap (sometimes pheatmap gives strange errors when row names are not right)
# Set colours
col_fun = colorRamp2(c(0, 7, 15), c("#FAFA33", "yellow", "red"))
# row annotation
row_annot = rowAnnotation(Experiment = cor_mdat$Experiment, Plate = cor_mdat$Plate, Species = cor_mdat$Species)
Heatmap(batch_mdat, right_annotation = row_annot, col = col_fun, name = "log2(count +1) Binding Score")
rm(experiment_batch, batch_mdat, cor_mdat)
# Tukey's IQR role
experiment_all <- experiment_all %>%
group_by(Species, Experiment, Plate) %>%
mutate(q1 = quantile(Binding.Score, 0.25), q3 = quantile(Binding.Score, 0.75), iqr = IQR(Binding.Score)) %>%
mutate(outlier_des = ifelse(Binding.Score < q1 - 1.5*iqr | Binding.Score > q3 + 1.5*iqr, "Remove", "Keep"))
# Remove outliers by Tukey's criteria
experiment_all <- experiment_all %>%
filter(outlier_des != "Remove") %>%
droplevels()%>%
select(-outlier_des)
# Median score over plates, experiments
experiment_all <- experiment_all %>%
group_by(Antibody.Name, Species) %>%
summarise(median = median(Binding.Score))
experiment_all
summarise(median = median(log2(Binding.Score))
experiment_all <- experiment_all %>%
summarise(median = median(log2(Binding.Score))
summarise(median = median(log2(Binding.Score))
# Median score over plates, experiments
experiment_all <- experiment_all %>%
group_by(Antibody.Name, Species) %>%
summarise(median = median(log2(Binding.Score)))
# Libraries
library(tidyverse)
library(ComplexHeatmap)
library(colorRamp2)
library(coin)
# Reading in data
experiment_1 <- read.csv("~/Desktop/ab_stage2/experiment_1_input.csv")
experiment_2 <- read.csv("~/Desktop/ab_stage2/experiment_2_input.csv")
# Merging data into dataframe
experiment_all <- rbind(experiment_1, experiment_2)
# Quick data summary
# No negative counts
summary(experiment_all)
# Check for any missing values again
experiment_na <- colSums(is.na(experiment_all))
experiment_na
# Cleaning up
rm(experiment_na)
# Convert data-set to long-form for plotting
experiment_all <- experiment_all %>%
pivot_longer(cols = c(4, 5), names_to = "Species", values_to = "Binding.Score")
# Clean up binding score column
experiment_all$Species <- sub("Binding.Score.", "", experiment_all$Species)
# Convert to log2(counts + 1) for visualization
experiment_all$Binding.Score_vis <- log2(experiment_all$Binding.Score + 1)
# Create an interaction variable
experiment_all$experiment_plate <- with(experiment_all, interaction(Experiment, Plate), drop = TRUE)
# Tukey's IQR role
experiment_all <- experiment_all %>%
group_by(Species, Experiment, Plate) %>%
mutate(q1 = quantile(Binding.Score, 0.25), q3 = quantile(Binding.Score, 0.75), iqr = IQR(Binding.Score)) %>%
mutate(outlier_des = ifelse(Binding.Score < q1 - 1.5*iqr | Binding.Score > q3 + 1.5*iqr, "Remove", "Keep"))
# Remove outliers by Tukey's criteria
experiment_all <- experiment_all %>%
filter(outlier_des != "Remove") %>%
droplevels()%>%
select(-outlier_des)
# Tests for human binding score
experiment_plate1 <- experiment_all %>%
filter(Species == "Human", experiment_plate %in% c("Experiment 1.Plate 1", "Experiment 2.Plate 1"))
oneway_test(Binding.Score ~ experiment_plate, data = experiment_plate1)
var.test(Binding.Score ~ experiment_plate, data = experiment_plate1)
experiment_plate2 <- experiment_all %>%
filter(Species == "Human", experiment_plate %in% c("Experiment 1.Plate 2", "Experiment 2.Plate 2"))
oneway_test(Binding.Score ~ experiment_plate, data = experiment_plate2)
var.test(Binding.Score ~ experiment_plate, data = experiment_plate2)
# Tests for mouse binding score
mexperiment_plate1 <- experiment_all %>%
filter(Species == "Mouse", experiment_plate %in% c("Experiment 1.Plate 1", "Experiment 2.Plate 1"))
oneway_test(Binding.Score ~ experiment_plate, data = mexperiment_plate1)
var.test(Binding.Score ~ experiment_plate, data = mexperiment_plate1)
mexperiment_plate2 <- experiment_all %>%
filter(Species == "Mouse", experiment_plate %in% c("Experiment 1.Plate 2", "Experiment 2.Plate 2"))
oneway_test(Binding.Score ~ experiment_plate, data = mexperiment_plate2)
var.test(Binding.Score ~ experiment_plate, data = mexperiment_plate2)
rm(experiment_plate1, experiment_plate2, mexperiment_plate1, mexperiment_plate2)
# Median score over plates, experiments
experiment_all <- experiment_all %>%
group_by(Antibody.Name, Species) %>%
summarise(median = median(log2(Binding.Score)))
# Median score over plates, experiments
experiment_all <- experiment_all %>%
group_by(Antibody.Name, Species) %>%
summarise(median = median(log10(Binding.Score)))
# Libraries
library(tidyverse)
library(ComplexHeatmap)
library(colorRamp2)
library(coin)
# Reading in data
experiment_1 <- read.csv("~/Desktop/ab_stage2/experiment_1_input.csv")
experiment_2 <- read.csv("~/Desktop/ab_stage2/experiment_2_input.csv")
# Merging data into dataframe
experiment_all <- rbind(experiment_1, experiment_2)
# Quick data summary
# No negative counts
summary(experiment_all)
# Check for any missing values again
experiment_na <- colSums(is.na(experiment_all))
experiment_na
# Cleaning up
rm(experiment_na)
# Convert data-set to long-form for plotting
experiment_all <- experiment_all %>%
pivot_longer(cols = c(4, 5), names_to = "Species", values_to = "Binding.Score")
# Clean up binding score column
experiment_all$Species <- sub("Binding.Score.", "", experiment_all$Species)
# Convert to log2(counts + 1) for visualization
experiment_all$Binding.Score_vis <- log2(experiment_all$Binding.Score + 1)
# Create an interaction variable
experiment_all$experiment_plate <- with(experiment_all, interaction(Experiment, Plate), drop = TRUE)
# Tukey's IQR role
experiment_all <- experiment_all %>%
group_by(Species, Experiment, Plate) %>%
mutate(q1 = quantile(Binding.Score, 0.25), q3 = quantile(Binding.Score, 0.75), iqr = IQR(Binding.Score)) %>%
mutate(outlier_des = ifelse(Binding.Score < q1 - 1.5*iqr | Binding.Score > q3 + 1.5*iqr, "Remove", "Keep"))
# Remove outliers by Tukey's criteria
experiment_all <- experiment_all %>%
filter(outlier_des != "Remove") %>%
droplevels()%>%
select(-outlier_des)
# Median score over plates, experiments
experiment_all <- experiment_all %>%
group_by(Antibody.Name, Species) %>%
summarise(median = median(log2(Binding.Score)))
# Libraries
library(tidyverse)
library(ComplexHeatmap)
library(colorRamp2)
library(coin)
# Reading in data
experiment_1 <- read.csv("~/Desktop/ab_stage2/experiment_1_input.csv")
experiment_2 <- read.csv("~/Desktop/ab_stage2/experiment_2_input.csv")
# Merging data into dataframe
experiment_all <- rbind(experiment_1, experiment_2)
# Quick data summary
# No negative counts
summary(experiment_all)
# Check for any missing values again
experiment_na <- colSums(is.na(experiment_all))
experiment_na
# Cleaning up
rm(experiment_na)
# Convert data-set to long-form for plotting
experiment_all <- experiment_all %>%
pivot_longer(cols = c(4, 5), names_to = "Species", values_to = "Binding.Score")
# Clean up binding score column
experiment_all$Species <- sub("Binding.Score.", "", experiment_all$Species)
# Convert to log2(counts + 1) for visualization
experiment_all$Binding.Score_vis <- log2(experiment_all$Binding.Score + 1)
# Create an interaction variable
experiment_all$experiment_plate <- with(experiment_all, interaction(Experiment, Plate), drop = TRUE)
# Tukey's IQR role
experiment_all <- experiment_all %>%
group_by(Species, Experiment, Plate) %>%
mutate(q1 = quantile(Binding.Score, 0.25), q3 = quantile(Binding.Score, 0.75), iqr = IQR(Binding.Score)) %>%
mutate(outlier_des = ifelse(Binding.Score < q1 - 1.5*iqr | Binding.Score > q3 + 1.5*iqr, "Remove", "Keep"))
# Remove outliers by Tukey's criteria
experiment_all <- experiment_all %>%
filter(outlier_des != "Remove") %>%
droplevels()%>%
select(-outlier_des)
# Median score over plates, experiments
experiment_all <- experiment_all %>%
group_by(Antibody.Name, Species) %>%
summarise(median_score = median(log2(Binding.Score)))
# Calculate fold change
experiment_all_1 <- experiment_all %>%
group_by(Species) %>%
summarise(log_fold_change_neg =  median_score/median_score[Antibody.Name == "Ctrl-iso"], log_fold_change_pos =
median_score/median_score[Antibody.Name == "Ctrl-pos"])
View(experiment_all_test)
View(experiment_all_1)
# Calculate fold change
experiment_all_1 <- experiment_all %>%
group_by(Species) %>%
summarise(Antibody.Name, log_fold_change_neg =  median_score/median_score[Antibody.Name == "Ctrl-iso"], log_fold_change_pos = median_score/median_score[Antibody.Name == "Ctrl-pos"])
12.621184/9.908080
# Calculate fold change
experiment_all_1 <- experiment_all %>%
group_by(Species) %>%
summarise(Antibody.Name, log_fold_change_neg =  median_score/median_score[Antibody.Name == "Ctrl-iso"], log_fold_change_pos = median_score/median_score[Antibody.Name == "Ctrl-pos"]) %>%
filter(Antibody.Name %in% c("Ctrl-pos", "Ctrl-iso"))
# Calculate fold change
experiment_all <- experiment_all %>%
group_by(Species) %>%
summarise(Antibody.Name, log_fold_change_neg =  median_score/median_score[Antibody.Name == "Ctrl-iso"], log_fold_change_pos = median_score/median_score[Antibody.Name == "Ctrl-pos"]) %>%
filter(Antibody.Name %in% c("Ctrl-pos", "Ctrl-iso"))
View(experiment_all)
# Reading in data
experiment_1 <- read.csv("~/Desktop/ab_stage2/experiment_1_input.csv")
experiment_2 <- read.csv("~/Desktop/ab_stage2/experiment_2_input.csv")
# Merging data into dataframe
experiment_all <- rbind(experiment_1, experiment_2)
# Quick data summary
# No negative counts
summary(experiment_all)
# Check for any missing values again
experiment_na <- colSums(is.na(experiment_all))
experiment_na
# Cleaning up
rm(experiment_na)
# Convert data-set to long-form for plotting
experiment_all <- experiment_all %>%
pivot_longer(cols = c(4, 5), names_to = "Species", values_to = "Binding.Score")
# Clean up binding score column
experiment_all$Species <- sub("Binding.Score.", "", experiment_all$Species)
# Convert to log2(counts + 1) for visualization
experiment_all$Binding.Score_vis <- log2(experiment_all$Binding.Score + 1)
# Create an interaction variable
experiment_all$experiment_plate <- with(experiment_all, interaction(Experiment, Plate), drop = TRUE)
# Tukey's IQR role
experiment_all <- experiment_all %>%
group_by(Species, Experiment, Plate) %>%
mutate(q1 = quantile(Binding.Score, 0.25), q3 = quantile(Binding.Score, 0.75), iqr = IQR(Binding.Score)) %>%
mutate(outlier_des = ifelse(Binding.Score < q1 - 1.5*iqr | Binding.Score > q3 + 1.5*iqr, "Remove", "Keep"))
# Remove outliers by Tukey's criteria
experiment_all <- experiment_all %>%
filter(outlier_des != "Remove") %>%
droplevels()%>%
select(-outlier_des)
# Tests for human binding score
experiment_plate1 <- experiment_all %>%
filter(Species == "Human", experiment_plate %in% c("Experiment 1.Plate 1", "Experiment 2.Plate 1"))
oneway_test(Binding.Score ~ experiment_plate, data = experiment_plate1)
var.test(Binding.Score ~ experiment_plate, data = experiment_plate1)
experiment_plate2 <- experiment_all %>%
filter(Species == "Human", experiment_plate %in% c("Experiment 1.Plate 2", "Experiment 2.Plate 2"))
oneway_test(Binding.Score ~ experiment_plate, data = experiment_plate2)
var.test(Binding.Score ~ experiment_plate, data = experiment_plate2)
# Tests for mouse binding score
mexperiment_plate1 <- experiment_all %>%
filter(Species == "Mouse", experiment_plate %in% c("Experiment 1.Plate 1", "Experiment 2.Plate 1"))
oneway_test(Binding.Score ~ experiment_plate, data = mexperiment_plate1)
var.test(Binding.Score ~ experiment_plate, data = mexperiment_plate1)
mexperiment_plate2 <- experiment_all %>%
filter(Species == "Mouse", experiment_plate %in% c("Experiment 1.Plate 2", "Experiment 2.Plate 2"))
oneway_test(Binding.Score ~ experiment_plate, data = mexperiment_plate2)
var.test(Binding.Score ~ experiment_plate, data = mexperiment_plate2)
rm(experiment_plate1, experiment_plate2, mexperiment_plate1, mexperiment_plate2)
# Median score over plates, experiments
experiment_all <- experiment_all %>%
group_by(Antibody.Name, Species) %>%
summarise(median_score = median(log2(Binding.Score)))
# Calculate fold change
experiment_all <- experiment_all %>%
group_by(Species) %>%
summarise(Antibody.Name, log_fold_change_neg =  median_score/median_score[Antibody.Name == "Ctrl-iso"], log_fold_change_pos = median_score/median_score[Antibody.Name == "Ctrl-pos"]) %>%
filter(!(Antibody.Name %in% c("Ctrl-pos", "Ctrl-iso")))
View(experiment_all)
head(experiment_all)
# Libraries
library(tidyverse)
library(ComplexHeatmap)
library(colorRamp2)
library(coin)
# Reading in data
experiment_1 <- read.csv("~/Desktop/ab_stage2/experiment_1_input.csv")
experiment_2 <- read.csv("~/Desktop/ab_stage2/experiment_2_input.csv")
# Merging data into dataframe
experiment_all <- rbind(experiment_1, experiment_2)
# Quick data summary
# No negative counts
summary(experiment_all)
# Check for any missing values again
experiment_na <- colSums(is.na(experiment_all))
experiment_na
# Cleaning up
rm(experiment_na)
# Convert data-set to long-form for plotting
experiment_all <- experiment_all %>%
pivot_longer(cols = c(4, 5), names_to = "Species", values_to = "Binding.Score")
# Clean up binding score column
experiment_all$Species <- sub("Binding.Score.", "", experiment_all$Species)
# Convert to log2(counts + 1) for visualization
experiment_all$Binding.Score_vis <- log2(experiment_all$Binding.Score + 1)
# Create an interaction variable
experiment_all$experiment_plate <- with(experiment_all, interaction(Experiment, Plate), drop = TRUE)
# Tukey's IQR role
experiment_all <- experiment_all %>%
group_by(Species, Experiment, Plate) %>%
mutate(q1 = quantile(Binding.Score, 0.25), q3 = quantile(Binding.Score, 0.75), iqr = IQR(Binding.Score)) %>%
mutate(outlier_des = ifelse(Binding.Score < q1 - 1.5*iqr | Binding.Score > q3 + 1.5*iqr, "Remove", "Keep"))
# Remove outliers by Tukey's criteria
experiment_all <- experiment_all %>%
filter(outlier_des != "Remove") %>%
droplevels()%>%
select(-outlier_des)
# Median score over plates, experiments
experiment_all <- experiment_all %>%
group_by(Antibody.Name, Species) %>%
summarise(median_score = median(Binding.Score))
# Calculate fold change
experiment_all <- experiment_all %>%
group_by(Species) %>%
summarise(Antibody.Name, fold_change_neg =  median_score/median_score[Antibody.Name == "Ctrl-iso"], fold_change_pos = median_score/median_score[Antibody.Name == "Ctrl-pos"]) %>%
filter(!(Antibody.Name %in% c("Ctrl-pos", "Ctrl-iso")))
# Libraries
library(tidyverse)
library(ComplexHeatmap)
library(colorRamp2)
library(coin)
# Reading in data
experiment_1 <- read.csv("~/Desktop/ab_stage2/experiment_1_input.csv")
experiment_2 <- read.csv("~/Desktop/ab_stage2/experiment_2_input.csv")
# Merging data into dataframe
experiment_all <- rbind(experiment_1, experiment_2)
# Quick data summary
# No negative counts
summary(experiment_all)
# Check for any missing values again
experiment_na <- colSums(is.na(experiment_all))
experiment_na
# Cleaning up
rm(experiment_na)
# Convert data-set to long-form for plotting
experiment_all <- experiment_all %>%
pivot_longer(cols = c(4, 5), names_to = "Species", values_to = "Binding.Score")
# Clean up binding score column
experiment_all$Species <- sub("Binding.Score.", "", experiment_all$Species)
# Convert to log2(counts + 1) for visualization
experiment_all$Binding.Score_vis <- log2(experiment_all$Binding.Score + 1)
# Create an interaction variable
experiment_all$experiment_plate <- with(experiment_all, interaction(Experiment, Plate), drop = TRUE)
# Tukey's IQR role
experiment_all <- experiment_all %>%
group_by(Species, Experiment, Plate) %>%
mutate(q1 = quantile(Binding.Score, 0.25), q3 = quantile(Binding.Score, 0.75), iqr = IQR(Binding.Score)) %>%
mutate(outlier_des = ifelse(Binding.Score < q1 - 1.5*iqr | Binding.Score > q3 + 1.5*iqr, "Remove", "Keep"))
# Remove outliers by Tukey's criteria
experiment_all <- experiment_all %>%
filter(outlier_des != "Remove") %>%
droplevels()%>%
select(-outlier_des)
# Median score over plates, experiments
experiment_all <- experiment_all %>%
group_by(Antibody.Name, Species) %>%
summarise(median_score = median(log(Binding.Score)))
# Calculate fold change
experiment_all <- experiment_all %>%
group_by(Species) %>%
summarise(Antibody.Name, fold_change_neg =  median_score/median_score[Antibody.Name == "Ctrl-iso"], fold_change_pos = median_score/median_score[Antibody.Name == "Ctrl-pos"]) %>%
filter(!(Antibody.Name %in% c("Ctrl-pos", "Ctrl-iso")))
head(experiment_all)
View(experiment_all)
# Libraries
library(tidyverse)
library(ComplexHeatmap)
library(colorRamp2)
library(coin)
# Reading in data
experiment_1 <- read.csv("~/Desktop/ab_stage2/experiment_1_input.csv")
experiment_2 <- read.csv("~/Desktop/ab_stage2/experiment_2_input.csv")
# Merging data into dataframe
experiment_all <- rbind(experiment_1, experiment_2)
# Quick data summary
# No negative counts
summary(experiment_all)
# Check for any missing values again
experiment_na <- colSums(is.na(experiment_all))
experiment_na
# Cleaning up
rm(experiment_na)
# Convert data-set to long-form for plotting
experiment_all <- experiment_all %>%
pivot_longer(cols = c(4, 5), names_to = "Species", values_to = "Binding.Score")
# Clean up binding score column
experiment_all$Species <- sub("Binding.Score.", "", experiment_all$Species)
# Convert to log2(counts + 1) for visualization
experiment_all$Binding.Score_vis <- log2(experiment_all$Binding.Score + 1)
# Create an interaction variable
experiment_all$experiment_plate <- with(experiment_all, interaction(Experiment, Plate), drop = TRUE)
# Batch effects heatmap
experiment_batch <- experiment_all %>%
pivot_wider(id_cols = c(1, 2, 3), names_from = Antibody.Name, values_from = Binding.Score_vis)
# Remove annotation columns
batch_mdat <- experiment_batch[, -c(1, 2, 3)]
batch_mdat <- apply(batch_mdat, 2, as.numeric)
# Annotation columns
cor_mdat <- experiment_batch[, c("Experiment", "Plate", "Species")]
# Convert to factor
cor_mdat[, c(1, 2, 3)] <- lapply(cor_mdat[, c(1, 2, 3)], as.factor)
# Heatmap with ComplexHeatmap (sometimes pheatmap gives strange errors when row names are not right)
# Set colours
col_fun = colorRamp2(c(0, 7, 15), c("#FAFA33", "yellow", "red"))
# row annotation
row_annot = rowAnnotation(Experiment = cor_mdat$Experiment, Plate = cor_mdat$Plate, Species = cor_mdat$Species)
Heatmap(batch_mdat, right_annotation = row_annot, col = col_fun, name = "log2(count +1) Binding Score")
rm(experiment_batch, batch_mdat, cor_mdat)
# Tukey's IQR role
experiment_all <- experiment_all %>%
group_by(Species, Experiment, Plate) %>%
mutate(q1 = quantile(Binding.Score, 0.25), q3 = quantile(Binding.Score, 0.75), iqr = IQR(Binding.Score)) %>%
mutate(outlier_des = ifelse(Binding.Score < q1 - 1.5*iqr | Binding.Score > q3 + 1.5*iqr, "Remove", "Keep"))
# Remove outliers by Tukey's criteria
experiment_all <- experiment_all %>%
filter(outlier_des != "Remove") %>%
droplevels()%>%
select(-outlier_des)
# Median score over plates, experiments
experiment_all <- experiment_all %>%
group_by(Antibody.Name, Species) %>%
summarise(median_score = median(Binding.Score))
# Calculate fold change
experiment_all <- experiment_all %>%
group_by(Species) %>%
summarise(Antibody.Name, fold_change_neg =  log2(median_score/median_score[Antibody.Name == "Ctrl-iso"]), log2(fold_change_pos = median_score/median_score[Antibody.Name == "Ctrl-pos"])) %>%
filter(!(Antibody.Name %in% c("Ctrl-pos", "Ctrl-iso")))
# Calculate fold change
experiment_all <- experiment_all %>%
group_by(Species) %>%
summarise(Antibody.Name, fold_change_neg =  log2(median_score/median_score[Antibody.Name == "Ctrl-iso"]), log2(fold_change_pos = median_score/median_score[Antibody.Name == "Ctrl-pos"])) %>%
filter(!(Antibody.Name %in% c("Ctrl-pos", "Ctrl-iso")))
# Calculate fold change
experiment_all <- experiment_all %>%
group_by(Species) %>%
summarise(Antibody.Name, fold_change_neg =  log2(median_score/median_score[Antibody.Name == "Ctrl-iso"]),
log_fold_change_pos = log2(median_score/median_score[Antibody.Name == "Ctrl-pos"])) %>%
filter(!(Antibody.Name %in% c("Ctrl-pos", "Ctrl-iso")))
View(experiment_all)
antibodies_list <- experiment_all %>%
filter(log_fold_change_neg > 0 & log_fold_change_pos > 0)
antibodies_list <- experiment_all %>%
filter(fold_change_neg > 0 & log_fold_change_pos > 0)
View(antibodies_list)
antibodies_humans <- antibodies_list %>%
slice(n = 5)
antibodies_humans <- antibodies_list %>%
filter(Species == "Human") %>%
arrange(desc(fold_change_neg), desc(log_fold_change_pos))
View(antibodies_humans)
antibodies_mouse <- antibodies_list %>%
filter(Species == "Mouse") %>%
arrange(desc(log_fold_change_neg), desc(log_fold_change_pos))
antibodies_mouse <- antibodies_list %>%
filter(Species == "Mouse") %>%
arrange(desc(fold_change_neg), desc(log_fold_change_pos))
antibodies_mouse <- antibodies_list %>%
filter(Species == "Mouse") %>%
arrange(desc(log_fold_change_neg), desc(log_fold_change_pos))
View(antibodies_mouse)
antibodies_humans
