// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// grad_ls_loss
arma::vec grad_ls_loss(arma::rowvec& x, double& y, arma::vec& param, int& p);
RcppExport SEXP _mtool_grad_ls_loss(SEXP xSEXP, SEXP ySEXP, SEXP paramSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::rowvec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< double& >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type param(paramSEXP);
    Rcpp::traits::input_parameter< int& >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(grad_ls_loss(x, y, param, p));
    return rcpp_result_gen;
END_RCPP
}
// grad_logistic_loss
arma::vec grad_logistic_loss(arma::rowvec& x, double& y, arma::vec& param, int& p);
RcppExport SEXP _mtool_grad_logistic_loss(SEXP xSEXP, SEXP ySEXP, SEXP paramSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::rowvec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< double& >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type param(paramSEXP);
    Rcpp::traits::input_parameter< int& >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(grad_logistic_loss(x, y, param, p));
    return rcpp_result_gen;
END_RCPP
}
// grad_multinom_loss
arma::mat grad_multinom_loss(arma::rowvec& x, int& y, int& K, double& offset, arma::mat& param, int& p);
RcppExport SEXP _mtool_grad_multinom_loss(SEXP xSEXP, SEXP ySEXP, SEXP KSEXP, SEXP offsetSEXP, SEXP paramSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::rowvec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< int& >::type y(ySEXP);
    Rcpp::traits::input_parameter< int& >::type K(KSEXP);
    Rcpp::traits::input_parameter< double& >::type offset(offsetSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type param(paramSEXP);
    Rcpp::traits::input_parameter< int& >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(grad_multinom_loss(x, y, K, offset, param, p));
    return rcpp_result_gen;
END_RCPP
}
// mtool
Rcpp::List mtool(arma::mat X, arma::mat Y, arma::vec wt, int K, int reg_p, arma::vec nk_vec, arma::vec task_rowid, int loss, int penalty, std::string regul, bool transpose, Rcpp::IntegerVector grp_id, Rcpp::NumericVector etaG, arma::mat grp, arma::mat grpV, Rcpp::IntegerVector own_var, Rcpp::IntegerVector N_own_var, double lam1, double lam2, double lam3, double learning_rate, double tolerance, int niter_inner, int maxit, int ncores);
RcppExport SEXP _mtool_mtool(SEXP XSEXP, SEXP YSEXP, SEXP wtSEXP, SEXP KSEXP, SEXP reg_pSEXP, SEXP nk_vecSEXP, SEXP task_rowidSEXP, SEXP lossSEXP, SEXP penaltySEXP, SEXP regulSEXP, SEXP transposeSEXP, SEXP grp_idSEXP, SEXP etaGSEXP, SEXP grpSEXP, SEXP grpVSEXP, SEXP own_varSEXP, SEXP N_own_varSEXP, SEXP lam1SEXP, SEXP lam2SEXP, SEXP lam3SEXP, SEXP learning_rateSEXP, SEXP toleranceSEXP, SEXP niter_innerSEXP, SEXP maxitSEXP, SEXP ncoresSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type wt(wtSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< int >::type reg_p(reg_pSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type nk_vec(nk_vecSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type task_rowid(task_rowidSEXP);
    Rcpp::traits::input_parameter< int >::type loss(lossSEXP);
    Rcpp::traits::input_parameter< int >::type penalty(penaltySEXP);
    Rcpp::traits::input_parameter< std::string >::type regul(regulSEXP);
    Rcpp::traits::input_parameter< bool >::type transpose(transposeSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type grp_id(grp_idSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type etaG(etaGSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type grp(grpSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type grpV(grpVSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type own_var(own_varSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type N_own_var(N_own_varSEXP);
    Rcpp::traits::input_parameter< double >::type lam1(lam1SEXP);
    Rcpp::traits::input_parameter< double >::type lam2(lam2SEXP);
    Rcpp::traits::input_parameter< double >::type lam3(lam3SEXP);
    Rcpp::traits::input_parameter< double >::type learning_rate(learning_rateSEXP);
    Rcpp::traits::input_parameter< double >::type tolerance(toleranceSEXP);
    Rcpp::traits::input_parameter< int >::type niter_inner(niter_innerSEXP);
    Rcpp::traits::input_parameter< int >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< int >::type ncores(ncoresSEXP);
    rcpp_result_gen = Rcpp::wrap(mtool(X, Y, wt, K, reg_p, nk_vec, task_rowid, loss, penalty, regul, transpose, grp_id, etaG, grp, grpV, own_var, N_own_var, lam1, lam2, lam3, learning_rate, tolerance, niter_inner, maxit, ncores));
    return rcpp_result_gen;
END_RCPP
}
// MultinomLogistic
Rcpp::List MultinomLogistic(arma::mat X, arma::vec Y, arma::vec offset, int K, int reg_p, int penalty, std::string regul, bool transpose, Rcpp::IntegerVector grp_id, Rcpp::NumericVector etaG, arma::mat grp, arma::mat grpV, Rcpp::IntegerVector own_var, Rcpp::IntegerVector N_own_var, double lam1, double lam2, double lam3, double learning_rate, double tolerance, int niter_inner, int maxit, int ncores);
RcppExport SEXP _mtool_MultinomLogistic(SEXP XSEXP, SEXP YSEXP, SEXP offsetSEXP, SEXP KSEXP, SEXP reg_pSEXP, SEXP penaltySEXP, SEXP regulSEXP, SEXP transposeSEXP, SEXP grp_idSEXP, SEXP etaGSEXP, SEXP grpSEXP, SEXP grpVSEXP, SEXP own_varSEXP, SEXP N_own_varSEXP, SEXP lam1SEXP, SEXP lam2SEXP, SEXP lam3SEXP, SEXP learning_rateSEXP, SEXP toleranceSEXP, SEXP niter_innerSEXP, SEXP maxitSEXP, SEXP ncoresSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type offset(offsetSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< int >::type reg_p(reg_pSEXP);
    Rcpp::traits::input_parameter< int >::type penalty(penaltySEXP);
    Rcpp::traits::input_parameter< std::string >::type regul(regulSEXP);
    Rcpp::traits::input_parameter< bool >::type transpose(transposeSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type grp_id(grp_idSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type etaG(etaGSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type grp(grpSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type grpV(grpVSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type own_var(own_varSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type N_own_var(N_own_varSEXP);
    Rcpp::traits::input_parameter< double >::type lam1(lam1SEXP);
    Rcpp::traits::input_parameter< double >::type lam2(lam2SEXP);
    Rcpp::traits::input_parameter< double >::type lam3(lam3SEXP);
    Rcpp::traits::input_parameter< double >::type learning_rate(learning_rateSEXP);
    Rcpp::traits::input_parameter< double >::type tolerance(toleranceSEXP);
    Rcpp::traits::input_parameter< int >::type niter_inner(niter_innerSEXP);
    Rcpp::traits::input_parameter< int >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< int >::type ncores(ncoresSEXP);
    rcpp_result_gen = Rcpp::wrap(MultinomLogistic(X, Y, offset, K, reg_p, penalty, regul, transpose, grp_id, etaG, grp, grpV, own_var, N_own_var, lam1, lam2, lam3, learning_rate, tolerance, niter_inner, maxit, ncores));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_mtool_grad_ls_loss", (DL_FUNC) &_mtool_grad_ls_loss, 4},
    {"_mtool_grad_logistic_loss", (DL_FUNC) &_mtool_grad_logistic_loss, 4},
    {"_mtool_grad_multinom_loss", (DL_FUNC) &_mtool_grad_multinom_loss, 6},
    {"_mtool_mtool", (DL_FUNC) &_mtool_mtool, 25},
    {"_mtool_MultinomLogistic", (DL_FUNC) &_mtool_MultinomLogistic, 22},
    {NULL, NULL, 0}
};

RcppExport void R_init_mtool(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
